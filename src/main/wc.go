package main

import (
	"fmt"
	"log"
	"mapreduce"
	"os"
	"strconv"
	"strings"
	//"unicode"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// Your code here (Part II).
	//splits = strings.FieldsFunc(contents, func (input rune) bool{
	//	return !unicode.IsLetter(input)
	//})

	splits := strings.Fields(contents)
	wmap := make(map[string]int)

	count := 0
	for _, val := range splits {
		_, ok := wmap[val]
		if !ok {
			wmap[val] = 1
		} else {
			wmap[val] += 1
		}
	}

	ret := make([]mapreduce.KeyValue, len(wmap))
	for key, val := range wmap {
		ret[count].Key = key
		ret[count].Value = strconv.Itoa(val)

		count += 1
	}
	return ret
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	// Your code here (Part II).

	sum := 0
	for i := 0; i < len(values); i++ {
		val, err := strconv.Atoi(values[i])
		if err != nil {
			log.Printf("cannot convert %v", val)
			break
		}
		sum += val
	}
	return strconv.Itoa(sum)

}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	fmt.Println("args", os.Args, os.Args[3:])

	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
